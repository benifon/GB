# Практическое задание
# 1. Написать генератор нечётных чисел от 1 до n (включительно), используя ключевое слово
# yield, например:
# >>> odd_to_15 = odd_nums(15)
# >>> next(odd_to_15)
# 1
# >>> next(odd_to_15)
# 3
# ...
# >>> next(odd_to_15)
# 15
# >>> next(odd_to_15)
# ...StopIteration...

def odd_nums(num):
    for number in range(1, num + 1):
        if number % 2 != 0:
            yield number


od_to_15 = odd_nums(15)
print(type(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))
print(next(od_to_15))

# 2. *(вместо 1) Решить задачу генерации нечётных чисел от 1 до n (включительно), не используя
# ключевое слово yield.
nums = 100
numbers = (num for num in range(1, nums + 1, 2))
print(type(numbers))
# 3. Есть два списка:
# tutors = [
# 'Иван', 'Анастасия', 'Петр', 'Сергей',
# 'Дмитрий', 'Борис', 'Елена'
# ]
# klasses = [
# '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>),
# например:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в
# списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние
# кортежи в виде: (<tutor>, None), например:
# ('Станислав', None)
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
# Подумать, в каких ситуациях генератор даст эффект.

tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей',
          'Дмитрий', 'Борис', 'Елена'
          ]
klasses = ['9А', '7В', '9Б', '9В',
           '8Б', '10А', '10Б'
           ]

def gen():
    if len(tutors) < len(klasses):
        print("все плохо")
    if len(tutors) > len(klasses):
        print("еще хуже")
    else:
        a = tuple(zip(tutors, klasses))
        yield a


gen()
print(gen())
print(list(gen()))

#
# 4. Представлен список чисел. Необходимо вывести те его элементы, значения которых больше
# предыдущего, например:
# © geekbrains.ru 13
# src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# result = [12, 44, 4, 10, 78, 123]
# Подсказка: использовать возможности python, изученные на уроке. Подумайте, как можно
# сделать оптимизацию кода по памяти, по скорости.

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
src_res = []
for i in range(len(src)-1):
    if src[i] < src[i+1]:
        src_res.append(src[i+1])

print(src_res)

# 5. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать из этих элементов список с сохранением порядка их следования в исходном
# списке, например:
# src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# result = [23, 1, 3, 10, 4, 11]

src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
src_result = sorted(set(src), key=lambda sc: src.index(sc))
print(src_result)
